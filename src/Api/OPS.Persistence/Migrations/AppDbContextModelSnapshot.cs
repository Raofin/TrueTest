// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OPS.Persistence;

#nullable disable

namespace OPS.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OPS.Domain.Entities.Core.CloudFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("IsActive")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("CloudFiles", "Core");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Core.LogEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("LogEvents", "Core");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyName")
                        .IsUnique();

                    b.ToTable("Difficulties", "Enum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DifficultyName = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            DifficultyName = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            DifficultyName = "Hard"
                        });
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("QuestionTypes", "Enum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Problem Solving"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Written"
                        },
                        new
                        {
                            Id = 3,
                            Type = "MCQ"
                        });
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles", "Enum");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Candidate"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.ExamCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CandidateEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasCheated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReviewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("McqScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("ProblemSolvingScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.Property<decimal>("WrittenScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("IsActive")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("ExamCandidates", "Exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime>("ClosesAt")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("DescriptionMarkdown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("McqPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("OpensAt")
                        .HasColumnType("DateTime");

                    b.Property<decimal>("ProblemSolvingPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("TotalPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.Property<decimal>("WrittenPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Examinations", "Exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.McqOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<string>("AnswerOptions")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsMultiSelect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("McqOption", "Exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasLongAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("StatementMarkdown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("IsActive")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions", "Exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.TestCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("ExpectedOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("TestCases", "Exam");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Submit.McqSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerOptions")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<Guid>("McqOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("McqOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("McqSubmissions", "Submit");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Submit.ProblemSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("FlagReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFlagged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ProblemSubmissions", "Submit");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Submit.TestCaseOutput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<bool>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProblemSubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceivedOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TestCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("ProblemSubmissionId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestCaseOutputs", "Submit");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Submit.WrittenSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("FlagReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFlagged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("QuestionId");

                    b.ToTable("WrittenSubmissions", "Submit");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts", "User");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.AccountRole", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles", "User");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.AdminInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.ToTable("AdminInvites", "User");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.Otp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<int>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("(DateAdd(minute, (5), GetUtcDate()))");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.ToTable("Otps", "User");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ImageFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InstituteName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("ImageFileId")
                        .IsUnique()
                        .HasFilter("[ImageFileId] IS NOT NULL");

                    b.HasIndex("IsActive")
                        .HasFilter("[IsActive] = 1");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Profiles", "User");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.ProfileLinks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("GetUtcDate()");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileLinks", "User");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Core.CloudFile", b =>
                {
                    b.HasOne("OPS.Domain.Entities.User.Account", "Account")
                        .WithMany("CloudFiles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.ExamCandidate", b =>
                {
                    b.HasOne("OPS.Domain.Entities.User.Account", "Account")
                        .WithMany("ExamCandidates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OPS.Domain.Entities.Exam.Examination", "Examination")
                        .WithMany("ExamCandidates")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.McqOption", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Exam.Question", "Question")
                        .WithOne("McqOption")
                        .HasForeignKey("OPS.Domain.Entities.Exam.McqOption", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Question", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Enum.Difficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Exam.Examination", "Examination")
                        .WithMany("Questions")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Enum.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Examination");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.TestCase", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Exam.Question", "Question")
                        .WithMany("TestCases")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Submit.McqSubmission", b =>
                {
                    b.HasOne("OPS.Domain.Entities.User.Account", "Account")
                        .WithMany("McqSubmissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Exam.McqOption", "McqOption")
                        .WithMany("McqSubmissions")
                        .HasForeignKey("McqOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Exam.Question", "Question")
                        .WithMany("McqSubmissions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("McqOption");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Submit.ProblemSubmission", b =>
                {
                    b.HasOne("OPS.Domain.Entities.User.Account", "Account")
                        .WithMany("ProblemSubmissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Exam.Question", "Question")
                        .WithMany("ProblemSubmissions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Submit.TestCaseOutput", b =>
                {
                    b.HasOne("OPS.Domain.Entities.Submit.ProblemSubmission", "ProblemSubmissions")
                        .WithMany("TestCaseOutputs")
                        .HasForeignKey("ProblemSubmissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Exam.TestCase", "TestCase")
                        .WithMany("TestCaseOutputs")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProblemSubmissions");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Submit.WrittenSubmission", b =>
                {
                    b.HasOne("OPS.Domain.Entities.User.Account", "Account")
                        .WithMany("WrittenSubmissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Exam.Question", "Question")
                        .WithMany("WrittenSubmissions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.AccountRole", b =>
                {
                    b.HasOne("OPS.Domain.Entities.User.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Enum.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.Profile", b =>
                {
                    b.HasOne("OPS.Domain.Entities.User.Account", "Account")
                        .WithOne("Profile")
                        .HasForeignKey("OPS.Domain.Entities.User.Profile", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OPS.Domain.Entities.Core.CloudFile", "ImageFile")
                        .WithOne("Profile")
                        .HasForeignKey("OPS.Domain.Entities.User.Profile", "ImageFileId");

                    b.Navigation("Account");

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.ProfileLinks", b =>
                {
                    b.HasOne("OPS.Domain.Entities.User.Profile", "Profile")
                        .WithMany("ProfileLinks")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Core.CloudFile", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.Difficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Enum.Role", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Examination", b =>
                {
                    b.Navigation("ExamCandidates");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.McqOption", b =>
                {
                    b.Navigation("McqSubmissions");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.Question", b =>
                {
                    b.Navigation("McqOption");

                    b.Navigation("McqSubmissions");

                    b.Navigation("ProblemSubmissions");

                    b.Navigation("TestCases");

                    b.Navigation("WrittenSubmissions");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Exam.TestCase", b =>
                {
                    b.Navigation("TestCaseOutputs");
                });

            modelBuilder.Entity("OPS.Domain.Entities.Submit.ProblemSubmission", b =>
                {
                    b.Navigation("TestCaseOutputs");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.Account", b =>
                {
                    b.Navigation("AccountRoles");

                    b.Navigation("CloudFiles");

                    b.Navigation("ExamCandidates");

                    b.Navigation("McqSubmissions");

                    b.Navigation("ProblemSubmissions");

                    b.Navigation("Profile");

                    b.Navigation("WrittenSubmissions");
                });

            modelBuilder.Entity("OPS.Domain.Entities.User.Profile", b =>
                {
                    b.Navigation("ProfileLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
